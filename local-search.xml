<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2022/10/10/test/"/>
    <url>/2022/10/10/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/10/hello-world/"/>
    <url>/2022/10/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC的基本配置</title>
    <link href="/2022/06/23/SpringMVC%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/06/23/SpringMVC%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h2><p>SpringMVC这个名字特别容易惹人误会，它并不是MVC，它只是<strong>C</strong>(Controller，控制器)而已。Spring有太多太多的组件，SpringMVC只是其中的一个。</p><p>从控制器的历史发展来看，第一代控制器是Servlet，第二代是Struts（同期还有WebWork），第三代是Struts2(Struts+WebWork合并而来)，第四代是SpringMVC。</p><p>业务层框架,可以理解为是对servlet的封装</p><p>SpringMVC是Spring框架的一部分,Spring3.0以后提出的技术</p><h2 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h2><p><img src="/img%5C001.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 用户发送请求到前端控制器（DispatcherServlet）。<br><br><span class="hljs-bullet">2.</span> 前端控制器请求处理器映射器（HandlerMapping）去查找处理器（Handler）。<br><br><span class="hljs-bullet">3.</span> 找到以后处理器映射器（HandlerMappering）向前端控制器返回执行链（HandlerExecutionChain）。<br><br><span class="hljs-bullet">4.</span> 前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）。<br><br><span class="hljs-bullet">5.</span> 处理器适配器去执行Handler。<br><br><span class="hljs-bullet">6.</span> 处理器执行完给处理器适配器返回ModelAndView。<br><br><span class="hljs-bullet">7.</span> 处理器适配器向前端控制器返回ModelAndView。<br><br><span class="hljs-bullet">8.</span> 前端控制器请求视图解析器（ViewResolver）去进行视图解析。<br><br><span class="hljs-bullet">9.</span> 视图解析器向前端控制器返回View。<br><br><span class="hljs-bullet">10.</span> 前端控制器对视图进行渲染。<br><br><span class="hljs-bullet">11.</span> 前端控制器向用户响应结果。<br></code></pre></td></tr></table></figure><h2 id="1、-SpringMVC的基本技术"><a href="#1、-SpringMVC的基本技术" class="headerlink" title="1、 SpringMVC的基本技术"></a>1、 SpringMVC的基本技术</h2><h3 id="1-1、非注解版配置（了解）"><a href="#1-1、非注解版配置（了解）" class="headerlink" title="1.1、非注解版配置（了解）"></a>1.1、非注解版配置（了解）</h3><p>导入jar  pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>maven的依赖</p><p><img src="/img%5C002.png" alt="1647221388858"></p><p>配置前端控制器  web.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.1&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--SpringMVC  是Spring3.0以后才有的技术  要求web.xml的版本不能低于2.5--&gt;</span><br><span class="hljs-comment">&lt;!--引入前端控制器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--前端控制启动 还需要创建3大对象  处理器映射器  处理器适配器  视图解析器</span><br><span class="hljs-comment">     把这三个对象 写在配置文件中   我们就需要在启动前端控制器时，读取配置文件  创建者三个对象</span><br><span class="hljs-comment">   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--保证第一时间启动前端控制器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <br>   <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--前端控制器的请求</span><br><span class="hljs-comment">      第一种：/  代表过滤所有</span><br><span class="hljs-comment">      第二种:*.action   *.do   *.jsp    配置具体的后缀</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>springMVC.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/context/spring-context-3.1.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置三大适配器--&gt;</span><br>    <span class="hljs-comment">&lt;!--手动配置--&gt;</span><br>    <span class="hljs-comment">&lt;!--处理器映射器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--处理器适配器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--配置处理器的请求--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/firstController.action&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bjpn.controllers.FirstController&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>非注解版处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<span class="hljs-comment">//处理器的根</span><br><span class="hljs-comment">//我们的第一个处理器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        System.out.println(<span class="hljs-string">&quot;这是我的第一个处理器&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-、注解版配置"><a href="#1-2-、注解版配置" class="headerlink" title="1.2 、注解版配置"></a>1.2 、注解版配置</h3><p>springMVC.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/context/spring-context-3.1.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用注解  简化配置  和SpringMVC的使用--&gt;</span><br>    <span class="hljs-comment">&lt;!--自动扫描   三大件   处理器映射器  处理器适配器  视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--处理器  注解扫描   自动扫描 @Controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.bjpn.controllers&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>处理器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpn.controllers;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-comment">//这是Spring的实体类注解</span><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-comment">//告诉框架  这个类是处理器类</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondController</span> &#123;<br>    <span class="hljs-comment">//注解版的处理器  可以处理多个请求   用方法来区分</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/controllerMethodDemo1.action&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">controllerMethodDemo1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是我的注解版处理方法  controllerMethodDemo1&quot;</span>);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3、SpringMVC常用的注解"><a href="#1-3、SpringMVC常用的注解" class="headerlink" title="1.3、SpringMVC常用的注解"></a>1.3、SpringMVC常用的注解</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Controller</span>           标示该类是处理器类<br><span class="hljs-variable">@RequestMapping</span>       映射url路径<br><span class="hljs-variable">@Resource</span><br><span class="hljs-variable">@ModelAttribute</span><br><span class="hljs-variable">@SessionAttributes</span> <br><span class="hljs-variable">@PathVariable</span>         接收动态参数  参数值写在请求中<br><span class="hljs-variable">@requestParam</span>         配置不同名参数<br><span class="hljs-variable">@ResponseBody</span>         异步ajax的json格式<br><span class="hljs-variable">@RequestBody</span>          接收前端异步请求参数<br></code></pre></td></tr></table></figure><p>@Controller：标示当前类是处理器类  我们会在Spring中详细介绍</p><p>@RequestMapping: 映射url路径   可以出现在类上和方法上</p><p>​    value， method；  只能用在方法上</p><p>   value：是路径名和请求名   只有value时可以省略   </p><p>  method：请求方式  GET、POST、PUT、DELETE等；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*value是当前处理方法的请求路径  必须/开头  /代表根路径    只有value时  value可以省略不写</span><br><span class="hljs-comment"> method:是当前处理方法的请求方式  默认处理所有类型的请求 */</span><br><span class="hljs-comment">/*@RequestMapping(value=&#123;&quot;/threeMethodDemo1.action&quot;,&quot;/threeMethod.do&quot;,&quot;/aaa/bbb/ccc.action&quot;&#125;</span><br><span class="hljs-comment">,method = &#123;RequestMethod.POST&#125;)*/</span><br><span class="hljs-meta">@RequestMapping(&quot;/threeMethodDemo1.action&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">threeMethodDemo1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在类上的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*RequestMapping出现在类上  表示当前处理方法的父路径</span><br><span class="hljs-comment">*  不能写请求方式  也不能写后缀</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@RequestMapping(&quot;/three/demo/ann&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreeController</span> &#123;<br></code></pre></td></tr></table></figure><h3 id="1-4、SpringMVC-的处理器"><a href="#1-4、SpringMVC-的处理器" class="headerlink" title="1.4、SpringMVC 的处理器"></a>1.4、SpringMVC 的处理器</h3><p>使用modelAndView方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//处理器处理方法  第一种方案 返回ModelAndView</span><br><span class="hljs-meta">@RequestMapping(&quot;/methodDemo1.action&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">methodDemo1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//ModelAndView是SpringMVC中提供的用于传参   跳转页面的对象</span><br>    mav.addObject(<span class="hljs-string">&quot;mavKey&quot;</span>, <span class="hljs-string">&quot;这是mav传递的值&quot;</span>);<br>    <span class="hljs-comment">//设置ModelAndView的响应视图</span><br>    mav.setViewName(<span class="hljs-string">&quot;methodDemo.jsp&quot;</span>);<br>    <span class="hljs-keyword">return</span> mav;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用Spring方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//处理器处理方法  第二种方案 返回String  工作中常用的</span><br><span class="hljs-meta">@RequestMapping(&quot;/methodDemo2.action&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">methodDemo2</span><span class="hljs-params">(HttpServletRequest request, HttpSession session, Map map)</span>&#123;<br>    <span class="hljs-comment">//直接写要跳转的页面   默认是转发</span><br>    System.out.println(<span class="hljs-string">&quot;这是String类型的返回值&quot;</span>);<br>    <span class="hljs-comment">//处理器适配器的作用  1 参数绑定  请求中携带的参数  自动接</span><br>    <span class="hljs-comment">//2 对象提供  处理器需要什么对象  只要有  适配器自动提供</span><br>    request.setAttribute(<span class="hljs-string">&quot;reqkey&quot;</span>, <span class="hljs-string">&quot;从适配器中取得Request&quot;</span>);<br>    session.setAttribute(<span class="hljs-string">&quot;sessKey&quot;</span>, <span class="hljs-string">&quot;session值&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;methodDemo.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用void返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//处理器处理方法  第三种方案 返回void  简单的异步</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodDemo3</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//不通过前端控制器的处理  直接响应</span><br>    request.getRequestDispatcher(<span class="hljs-string">&quot;methodDemo.jsp&quot;</span>).forward(request, response);<br>    response.sendRedirect(<span class="hljs-string">&quot;methodDemo.jsp&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5、-处理器适配器的使用"><a href="#1-5、-处理器适配器的使用" class="headerlink" title="1.5、 处理器适配器的使用"></a>1.5、 处理器适配器的使用</h3><p>1：接受参数    参数绑定</p><p>2：对象提供   给处理器提供处理器需要的对象    提供当前工程中所有的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamController</span> &#123;<br>    <span class="hljs-comment">//适配器的使用</span><br>    <span class="hljs-comment">//接收参数的第一种方法   使用servlet-api</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/ParamDemo1.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ParamDemo1</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">//request.getParameter接收到的值都是String</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uname</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;uname&quot;</span>);<br>        System.out.println(uname);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;paramSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//SpringMVC的适配器  参数绑定</span><br>    <span class="hljs-comment">//从适配器中接收同名参数</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/ParamDemo2.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ParamDemo2</span><span class="hljs-params">(String uname)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;从适配器中直接取值：&quot;</span>+uname);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;paramSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//新版本SpringMVC可以自动转换成int  以前我们是转换成Integer</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/ParamDemo3.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ParamDemo3</span><span class="hljs-params">(<span class="hljs-type">int</span> uid,String uname)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;从适配器中直接取值：&quot;</span>+uname+<span class="hljs-string">&quot;---&quot;</span>+uid);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;paramSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//直接接收参数并拼接到指定对象当中   对象的属性名和参数名要一致</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/ParamDemo4.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ParamDemo4</span><span class="hljs-params">(User user)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;从适配器中直接取值：&quot;</span>+user);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;paramSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//传递不同名参数    @requestParam         配置不同名参数</span><br>    <span class="hljs-comment">//&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/ParamDemo5.action?sex=男&quot;&gt;适配器接收的不同名参数&lt;/a&gt;&lt;br/&gt;</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/ParamDemo5.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ParamDemo5</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;sex&quot;)</span> String usex)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;从适配器中直接取值：&quot;</span>+usex);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;paramSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//restful风格的请求   参数在请求中</span><br>   <span class="hljs-comment">/* &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/王五/18.action&quot;&gt;适配器接收动态参数请求&lt;/a&gt;&lt;br/&gt;*/</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/&#123;name&#125;/&#123;id&#125;.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ParamDemo6</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String uname,<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> uid)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;从适配器中直接取值：&quot;</span>+uname);<br>        System.out.println(<span class="hljs-string">&quot;uid&quot;</span>+uid);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;paramSuccess.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6、SpringMVC的乱码问题："><a href="#1-6、SpringMVC的乱码问题：" class="headerlink" title="1.6、SpringMVC的乱码问题："></a>1.6、SpringMVC的乱码问题：</h3><p>在tomcat6.0和tomcat7.0会出现get请求乱码问题</p><p>在javaweb中出现过post请求乱码问题，用request和response对象解决乱码问题</p><p>SpringMVC提供了编码过滤器  在web.xml中直接配置即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--解决post中文乱码问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--这两个可以不写--&gt;</span><br>  <span class="hljs-comment">&lt;!--强制开启request字符集--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--强制开启response字符集--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-7、SpringMVC转发与重定向"><a href="#1-7、SpringMVC转发与重定向" class="headerlink" title="1.7、SpringMVC转发与重定向"></a>1.7、SpringMVC转发与重定向</h3><p>请求重定向和转发 当处理器对请求处理完毕后，向其它资源进行跳转时，有两种跳转方式：请求转发与重 定向。而根据所要跳转的资源类型，又可分为两类：跳转到页面与跳转到其它处理器。</p><p>SpringMVC处理器的返回，无论是ModelAndView还是String  默认调用请求转发</p><p>现在可以使用简单的方式实现转发和重定向。</p><p> forward:表示转发，实现 request.getRequestDispatcher(“xx.jsp”).forward()</p><p> redirect:表示重定向，实现 response.sendRedirect(“xxx.jsp”) </p><p>转发和重定向都需要明确根路径: &#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/aaa&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnController</span> &#123;<br>    <span class="hljs-comment">//用ModelAndView</span><br>    <span class="hljs-meta">@RequestMapping(&quot;returnDemo1.action&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">returnDemo1</span><span class="hljs-params">(ModelAndView modelAndView)</span>&#123;<br>       <span class="hljs-comment">//转发</span><br>        modelAndView.setViewName(<span class="hljs-string">&quot;forward:/returnSuccess.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;returnDemo2.action&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">returnDemo2</span><span class="hljs-params">(ModelAndView modelAndView)</span>&#123;<br>        <span class="hljs-comment">//重定向</span><br>        modelAndView.setViewName(<span class="hljs-string">&quot;redirect:/page/returnSuccess.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>    <span class="hljs-comment">//用String</span><br>    <span class="hljs-meta">@RequestMapping(&quot;returnDemo3.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">returnDemo3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//转发</span><br>        System.out.println(<span class="hljs-string">&quot;这是String的请求转发&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/returnSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;returnDemo4.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">returnDemo4</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//重定向</span><br>        System.out.println(<span class="hljs-string">&quot;这是String的请求重定向&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/page/returnSuccess.jsp&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8、-域对象传值"><a href="#1-8、-域对象传值" class="headerlink" title="1.8、 域对象传值"></a>1.8、 域对象传值</h3><p>request   session  appliaction</p><p>ModelAndView   model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnParamController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/returnParamDemo1.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">returnParamDemo1</span><span class="hljs-params">(HttpServletRequest request, HttpSession session)</span>&#123;<br>        request.setAttribute(<span class="hljs-string">&quot;reqKey&quot;</span>, <span class="hljs-string">&quot;request域中值&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;sessionKey&quot;</span>, <span class="hljs-string">&quot;session中的值&quot;</span>);<br>        <span class="hljs-comment">//全局作用域 不能由适配器提供</span><br>        request.getServletContext().setAttribute(<span class="hljs-string">&quot;appKey&quot;</span>, <span class="hljs-string">&quot;全局域中值&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/page/paramSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/returnParamDemo2.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">returnParamDemo2</span><span class="hljs-params">(HttpServletRequest request, HttpSession session)</span>&#123;<br>        request.setAttribute(<span class="hljs-string">&quot;reqKey&quot;</span>, <span class="hljs-string">&quot;request域中值&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;sessionKey&quot;</span>, <span class="hljs-string">&quot;session中的值&quot;</span>);<br>        request.getServletContext().setAttribute(<span class="hljs-string">&quot;appKey&quot;</span>, <span class="hljs-string">&quot;全局域中值&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/page/paramSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//ModelAndView  转发时类似request域</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/returnParamDemo3.action&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">returnParamDemo3</span><span class="hljs-params">(ModelAndView modelAndView)</span>&#123;<br>        modelAndView.addObject(<span class="hljs-string">&quot;mavKey&quot;</span>,<span class="hljs-string">&quot;这是mav传值&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;forward:/page/paramSuccess.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>    <span class="hljs-comment">//ModelAndView  重定向时会把key-value拼接在请求中  多用在跳转其它处理器</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/returnParamDemo4.action&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">returnParamDemo4</span><span class="hljs-params">(ModelAndView modelAndView)</span>&#123;<br>        modelAndView.addObject(<span class="hljs-string">&quot;mavKey&quot;</span>,<span class="hljs-string">&quot;这是mav传值&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;redirect:/page/paramSuccess.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>    <span class="hljs-comment">//使用Model</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/returnParamDemo5.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">returnParamDemo5</span><span class="hljs-params">(Model model)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;modelKey&quot;</span>, <span class="hljs-string">&quot;这是model传值&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/page/paramSuccess.jsp&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//重定向时会把key-value拼接在请求中  多用在跳转其它处理器</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/returnParamDemo6.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">returnParamDemo6</span><span class="hljs-params">(Model model)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;modelKey&quot;</span>, <span class="hljs-string">&quot;这是model传值&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/page/paramSuccess.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9、-静态资源的访问"><a href="#1-9、-静态资源的访问" class="headerlink" title="1.9、   静态资源的访问"></a>1.9、   静态资源的访问</h3><p>静态资源主要包括：html,js,image,css等在webapp下不需要action的请求或文件。</p><p> 前端控制器的请求方式有两种：&#x2F;和*.后缀 </p><p>写&#x2F;的情况，因为 DispatcherServlet 会将向静态资源的获取请求，例如.css、.js、.jpg、.png 等资源的获取请求，当作是一个普通的 Controller 请求。中央调度器会调用处理器映射器为 其查找相应的处理器。当然也是找不到的，所以在这种情况下，所有的静态资源获取请求也 均会报 404 错误。</p><p>解决方案是以下三种方案：</p><h4 id="1-9-1：使用default-Servlet处理静态文件"><a href="#1-9-1：使用default-Servlet处理静态文件" class="headerlink" title="1.9.1：使用default Servlet处理静态文件"></a>1.9.1：使用default Servlet处理静态文件</h4><p>在web.xml当中加入以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用default Servlet处理以下请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/images/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.js<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.css<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>原理：我们是有两个servlet的，一个叫做default，一个叫做dispatcher,当图片,js,css这几个请求进来以后，到底是哪个servlet处理这些请求呢？肯定是default，因为它的<strong>url-pattern</strong>更精确一些，dispatcher的<strong>url-pattern</strong>是&#x2F;更抽象一些，精确的规则是要优先到抽象规则的。</p><p>所以我们会看到控制台日志空空如也。它根本没有走SpringMVC。</p><p>这种配置的优点在于效率很高，直接把请求从SpringMVC手中抢夺走了（完全不走SpringMVC的那11个执行流程）。</p><p>缺点是不同的Web容器不通用，default这个servlet是tomcat自带的，它是在apache-tomcat-9.0.30\conf\web.xml当中进行注册的，只是没有mapping而已，如果更换了Web容器的话，这个default Servlet也需要更换，例如在WebLogic下面这个Servlet被叫做FileServlet。</p><h4 id="1-9-2：在SpringMVC中配置静态资源的路径"><a href="#1-9-2：在SpringMVC中配置静态资源的路径" class="headerlink" title="1.9.2：在SpringMVC中配置静态资源的路径"></a>1.9.2：在SpringMVC中配置静态资源的路径</h4><p>在SpringMVC的核心配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 以下路径不会被当控制器拦截，当静态资源处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/images/*&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/images/&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/css/*&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/css/&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/*&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-9-3：SpringMVC交还default-Servlet处理"><a href="#1-9-3：SpringMVC交还default-Servlet处理" class="headerlink" title="1.9.3：SpringMVC交还default Servlet处理"></a>1.9.3：SpringMVC交还default Servlet处理</h4><p>在SpringMVC的核心配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 由springmvc对请求进行分类，如果是静态资源，则交给DefaultServlet处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>声 明 了 &lt;mvc:default-servlet-handler &#x2F;&gt; 后 ， springmvc 框 架 会 在 容 器 中 创 建</p><p>DefaultServletHttpRequestHandler 处理器对象。它会像一个检查员，对进入 DispatcherServlet</p><p>的 URL 进行筛查，如果发现是静态资源的请求，就将该请求转由 Web 应用服务器默认的</p><p>Servlet 处理。一般的服务器都有默认的 Servlet。 在 Tomcat 中，有一个专门用于处理静态资源访问的 Servlet 名叫 DefaultServlet。其<servlet-name/>为 default。可以处理各种静态资源访问请求。该 Servlet 注册在 Tomcat 服务器的 web.xml 中。在 Tomcat 安装目录&#x2F;conf&#x2F;web.xml。</p><p>在没有特殊要求的情况下，SpringMVC 的中央调度器 DispatcherServlet 的<url-pattern/> 常使用后辍匹配方式，如写为*.do 或者 *.action, *.mvc 等。 </p><h2 id="2-、SpringMVC的核心技术"><a href="#2-、SpringMVC的核心技术" class="headerlink" title="2 、SpringMVC的核心技术"></a>2 、SpringMVC的核心技术</h2><h3 id="2-1-、SpringMVC对ajax的操作"><a href="#2-1-、SpringMVC对ajax的操作" class="headerlink" title="2.1 、SpringMVC对ajax的操作"></a>2.1 、SpringMVC对ajax的操作</h3><p>使用servlet-api的方式处理异步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/ajaxDemo1.action&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ajaxDemo1</span><span class="hljs-params">(HttpServletResponse response)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>    System.out.println(<span class="hljs-string">&quot;第一种异步处理&quot;</span>);<br>    <span class="hljs-comment">//提供回值</span><br>    response.getWriter().write(<span class="hljs-string">&quot;hello get&quot;</span>);<br>&#125;<br><span class="hljs-meta">@RequestMapping(&quot;/ajaxDemo2.action&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ajaxDemo2</span><span class="hljs-params">(String uname,String upwd,HttpServletResponse response)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>    System.out.println(<span class="hljs-string">&quot;接收参数的异步处理:uname=&quot;</span>+uname+<span class="hljs-string">&quot;---upwd=&quot;</span>+upwd);<br>    <span class="hljs-comment">//提供回值</span><br>    response.getWriter().write(<span class="hljs-string">&quot;hello post&quot;</span>+uname);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用jackson来处理json数据</p><p>导入依赖</p><p>  Jackson需要三个包 core   databind   annotations</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入jackson--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img%5C003.png"></p><p>异步处理  处理器的回值用json格式比较方便,SpringMVC对json进行进一步封装,我们不需要手动生成json串</p><p>SpringMVC利用注解  @ResponseBody可以自动生成json串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#but3&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>               $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;ajaxDemo3.action&quot;</span>,<span class="hljs-string">&quot;uname=ks&amp;upwd=123&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>                   <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;接收json串1&quot;</span>+data);<br>                   <span class="hljs-title function_">alert</span>(data.<span class="hljs-property">uid</span>+<span class="hljs-string">&quot;---&quot;</span>+data.<span class="hljs-property">uname</span>);<br>               &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>           &#125;);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SpringMVC对json串进行了封装操作</span><br>    <span class="hljs-comment">//返回一个user对象  把user对象变成json串</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/ajaxDemo3.action&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span>   <span class="hljs-comment">//这个注解会自动把返回值变成json串</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">ajaxDemo3</span><span class="hljs-params">(User u)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到的参数,拼装对象了:&quot;</span>+u);<br>        u.setUid(<span class="hljs-number">1001</span>);<br>        <span class="hljs-keyword">return</span> u;<span class="hljs-comment">//返回一个user对象  需要把它变成json</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、-配置前置后置路径"><a href="#2-2、-配置前置后置路径" class="headerlink" title="2.2、 配置前置后置路径"></a>2.2、 配置前置后置路径</h3><p>我们要避免地址栏发起对页面的直接请求,把页面放在WEB-INF下  WEB-INF不接受直接请求  需要处理器转发过来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--在视图解析器中配置前缀和后缀  所有访问页面的代码可以自动拼装--&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WEB-INF/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToGoods</span> &#123;<br>    <span class="hljs-comment">//访问goodsAdd页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/toGoodsAdd.action&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toGoodsAdd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;goodsAdd&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3、文件操作"><a href="#2-3、文件操作" class="headerlink" title="2.3、文件操作"></a>2.3、文件操作</h3><h4 id="2-3-1-、文件上传"><a href="#2-3-1-、文件上传" class="headerlink" title="2.3.1 、文件上传"></a>2.3.1 、文件上传</h4><p>页面  post请求  enctype&#x3D;”multipart&#x2F;form-data”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;addGoods.action&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;goodsName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;goodsPrice&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品图片<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileUpload&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入jar：commons-fileupload   commons-io</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>springmvc.xml需要配置文件上传解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置文件上传解析器 id:必须是multipartResolver--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#&#123;1024*1024*80&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//商品添加</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/addGoods.action&quot;)</span><br>    <span class="hljs-comment">//MultipartFile 处理适配器会把文件放在Multipart中  我们直接从适配器中取即可</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addGoods</span><span class="hljs-params">(Goods goods, MultipartFile fileUpload, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//文件上传</span><br>        System.out.println(<span class="hljs-string">&quot;接收的值:&quot;</span>+goods);<br>        <span class="hljs-comment">//获取文件名字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> fileUpload.getOriginalFilename();<br>        System.out.println(<span class="hljs-string">&quot;fileName:&quot;</span>+fileName);<br>        <span class="hljs-comment">//获取上传路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/fileupload&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;path:&quot;</span>+path);<br>        <span class="hljs-comment">//拼接新路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">upload</span> <span class="hljs-operator">=</span> path+<span class="hljs-string">&quot;/&quot;</span>+fileName;<br>        System.out.println(<span class="hljs-string">&quot;最终上传路径:&quot;</span>+upload);<br>        <span class="hljs-comment">//上传   需要file对象</span><br>        fileUpload.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(upload));<br>        System.out.println(<span class="hljs-string">&quot;上传成功!!!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/toGoodsShow.action&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上传路径的方案一：利用webapp路径</p><p>配置路径</p><p><img src="/img%5C004.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//我们要把文件上传在 web下的fileUpload文件夹中</span><br><span class="hljs-comment">// 不能直接写磁盘路径   项目在服务器中部署   服务器会部署我们的项目</span><br><span class="hljs-comment">//随着服务器的改变  我们的路径会发生改变</span><br><span class="hljs-comment">//通过服务器的部署路径  去访问web下的内容</span><br><span class="hljs-type">String</span>  <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/fileUpload&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;真实路径:&quot;</span>+path);<br></code></pre></td></tr></table></figure><p>上传路径的方案二：配置虚拟路径</p><p><img src="/img%5C005.png"></p><p><img src="/img%5C006.png"></p><p><img src="/img%5C007.png"></p><h4 id="2-3-2、文件下载"><a href="#2-3-2、文件下载" class="headerlink" title="2.3.2、文件下载"></a>2.3.2、文件下载</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">/down.action&quot;</span>&gt;</span>文件下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;down&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; down() <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\yf\\test.png&quot;</span>);<br><br>        <span class="hljs-comment">//设置响应头为下载</span><br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br><br>        headers.setContentDispositionFormData(<span class="hljs-string">&quot;attachment&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;测试下载.png&quot;</span>.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>),<span class="hljs-string">&quot;ISO-8859-1&quot;</span>));<br><br>        <span class="hljs-type">byte</span>[] bytes = FileUtils.readFileToByteArray(file);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;<span class="hljs-type">byte</span>[]&gt;(bytes, headers, HttpStatus.OK);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-拦截器"><a href="#2-4-拦截器" class="headerlink" title="2.4 拦截器"></a>2.4 拦截器</h3><p>SpringMVC 中的 Interceptor 拦截器是非常重要和相当有用的，它的主要作用是拦截指定的用户请求，并进行相应的预处理与后处理。其拦截的时间点在“处理器映射器根据用户提 交的请求映射出了所要执行的处理器类，并且也找到了要执行该处理器类的处理器适配器， 在处理器适配器执行处理器之前”。当然，在处理器映射器映射出所要执行的处理器类时， 已经将拦截器与处理器组合为了一个处理器执行链，并返回给了中央调度器。 </p><p>SpringMVC的拦截器(Interceptor)跟Servlet的Filter用法上是差不多的，区别在于Filter的拦截范围更大，可拦截任意地址。SpringMVC的拦截器能拦截的只是已经进入到SpringMVC的请求。</p><p><img src="/img%5C008.png" alt="1647506669008"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">//访问前连接拦截  请求到达拦截器  判断请求是否合理  放行 true   不放行是false</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是访问前 &quot;</span>);<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getRequestURL();<br>        System.out.println(<span class="hljs-string">&quot;path:&quot;</span>+path);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//访问后拦截</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//处理器处理完毕  要返回值到前端控制器    可以进行拦截  还可以查看携带的值</span><br>    &#125;<br>   <span class="hljs-comment">//消亡</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义拦截器，需要实现 HandlerInterceptor 接口。而该接口中含有三个方法： </p><p>**preHandle(request,response, Object handler)**<strong>：</strong> </p><p>该方法在处理器方法执行之前执行。其返回值为 boolean，若为 true，则紧接着会执行处理器方 </p><p>法，且会将 afterCompletion()方法放入到一个专门的方法栈中等待执行。 </p><p> **postHandle(request,response, Object handler,modelAndView)**<strong>：</strong> </p><p>该方法在处理器方法执行之后执行。处理器方法若最终未被执行，则该方法不会执行。 </p><p>由于该方法是在处理器方法执行完后执行，且该方法参数中包含 ModelAndView，所以该方法可以修 </p><p>改处理器方法的处理结果数据，且可以修改跳转方向。 </p><p>**afterCompletion(request,response, Object handler, Exception ex)**<strong>：</strong> </p><p>当 preHandle()方法返回 true 时，会将该方法放到专门的方法栈中，等到对请求进行响应的所有 </p><p>工作完成之后才执行该方法。即该方法是在中央调度器渲染（数据填充）了响应页面之后执行的，此 </p><p>时对 ModelAndView 再操作也对响应无济于事。 </p><p><strong>afterCompletion</strong> <strong>最后执行的方法，清除资源，例如在</strong> <strong>Controller</strong> <strong>方法中加入数据</strong></p><p><img src="/img%5C009.png" alt="1647506875232"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 拦截器配置 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 多个拦截器将顺序执行 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 拦截路径  **代表着多层路径 --&gt;</span><br>           <span class="hljs-comment">&lt;!--&lt;mvc:exclude-mapping path=&quot;/login&quot;/&gt;--&gt;</span><span class="hljs-comment">&lt;!-- 不拦截路径 --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bjpn.inter.LoginInter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多个拦截器:</p><p>当有多个拦截器时，形成拦截器链。拦截器链的执行顺序，与其注册顺序一致。需要再 </p><p>次强调一点的是，当某一个拦截器的 preHandle()方法返回 true 并被执行到时，会向一个专 </p><p>门的方法栈中放入该拦截器的 afterCompletion()方法。 </p><p>多个拦截器中方法与处理器方法的执行顺序如下图： </p><p><img src="/img%5C010.png" alt="1647507012649"></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery的简单使用</title>
    <link href="/2022/05/10/JQuery%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/10/JQuery%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h4 id="第一节-jQuery概述"><a href="#第一节-jQuery概述" class="headerlink" title="第一节 jQuery概述"></a>第一节 jQuery概述</h4><h5 id="1-1-jQuery简介"><a href="#1-1-jQuery简介" class="headerlink" title="1.1 jQuery简介"></a>1.1 jQuery简介</h5><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（<em>或JavaScript框架</em>）。jQuery设计的宗旨是“Write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p><p>jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari 2.0+、Opera 9.0+等。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">目前jQuery有三个大版本：<br><span class="hljs-number">1</span>.<span class="hljs-keyword">x</span>：兼容ie<span class="hljs-number">678</span><span class="hljs-punctuation">,</span>使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用<span class="hljs-number">1</span>.<span class="hljs-keyword">x</span>版本就可以了，最终版本：<span class="hljs-number">1.12</span>.<span class="hljs-number">4</span> (<span class="hljs-number">2016</span>年<span class="hljs-number">5</span>月<span class="hljs-number">20</span>日)<br><span class="hljs-number">2</span>.<span class="hljs-keyword">x</span>：不兼容ie<span class="hljs-number">678</span>，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用<span class="hljs-number">2</span>.<span class="hljs-keyword">x</span>，最终版本：<span class="hljs-number">2.2</span>.<span class="hljs-number">4</span> (<span class="hljs-number">2016</span>年<span class="hljs-number">5</span>月<span class="hljs-number">20</span>日)<br><span class="hljs-number">3</span>.<span class="hljs-keyword">x</span>：不兼容ie<span class="hljs-number">678</span>，只支持最新的浏览器。除非特殊要求，一般不会使用<span class="hljs-number">3</span>.<span class="hljs-keyword">x</span>版本的，很多老的jQuery插件不支持这个版本。目前该版本是官方主要更新维护的版本。最新版本：<span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>（<span class="hljs-number">2017</span>年<span class="hljs-number">3</span>月<span class="hljs-number">20</span>日）<br><span class="hljs-number">1</span>.X大版本下，细分版本非常多，各个版本的函数都会有一定的差异。网上看到的很多教程大多是<span class="hljs-number">1</span>.<span class="hljs-keyword">x</span>版本的。jquery官方手册：http://api.jquery.com/<br></code></pre></td></tr></table></figure><h5 id="1-2-什么是jQuery？"><a href="#1-2-什么是jQuery？" class="headerlink" title="1.2 什么是jQuery？"></a>1.2 什么是jQuery？</h5><p>jQuery是一个JavaScript函数库。<br>jQuery是一个轻量级的”写的少，做的多”的JavaScript库。<br>jQuery库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><h5 id="1-3-为什么要用jQuery"><a href="#1-3-为什么要用jQuery" class="headerlink" title="1.3 为什么要用jQuery"></a>1.3 为什么要用jQuery</h5><p>目前网络上有大量开源的 JS 框架, 但是 jQuery 是目前最流行的 JS 框架，而且提供了大量的扩展。<br>很多大公司都在使用 jQuery， 例如:</p><ul><li>Google</li><li>Microsoft</li><li>IBM</li><li>Netflix</li></ul><h4 id="第二节-jQuery安装"><a href="#第二节-jQuery安装" class="headerlink" title="第二节 jQuery安装"></a>第二节 jQuery安装</h4><h5 id="2-1-网页中添加-jQuery"><a href="#2-1-网页中添加-jQuery" class="headerlink" title="2.1 网页中添加 jQuery"></a>2.1 网页中添加 jQuery</h5><p>可以通过多种方法在网页中添加 jQuery。 您可以使用以下方法：</p><ul><li>从 <a href="http://jquery.com/download/">jquery.com</a> 下载 jQuery 库</li><li>从 CDN 中载入 jQuery, 如从 Google 中加载 jQuery<br>有两个版本的 jQuery 可供下载：</li><li>Production version - 用于实际的网站中，已被精简和压缩。</li><li>Development version - 用于测试和开发（未压缩，是可读的代码）<br>以上两个版本都可以从 <a href="http://jquery.com/download/">jquery.com</a> 中下载。<br>jQuery 库是一个 JavaScript 文件，您可以使用 HTML 的 标签引用它：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure>当然你也可以使用其它网站的CDN：</li></ul><h5 id="2-2-百度-CDN"><a href="#2-2-百度-CDN" class="headerlink" title="2.2 百度 CDN"></a>2.2 百度 CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-新浪-CDN"><a href="#2-3-新浪-CDN" class="headerlink" title="2.3 新浪 CDN"></a>2.3 新浪 CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-4-Google-CDN"><a href="#2-4-Google-CDN" class="headerlink" title="2.4 Google CDN"></a>2.4 Google CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-5-Microsoft-CDN"><a href="#2-5-Microsoft-CDN" class="headerlink" title="2.5 Microsoft CDN"></a>2.5 Microsoft CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax.htmlnetcdn.com/ajax/jQuery/jquery-1.10.2.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="第三节-jQuery语法"><a href="#第三节-jQuery语法" class="headerlink" title="第三节 jQuery语法"></a>第三节 jQuery语法</h4><p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。<br>基础语法： <strong>$(selector).action()</strong></p><ul><li>美元符号定义 jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素</li><li>jQuery 的 action() 执行对元素的操作<br>实例:</li><li>$(this).hide() - 隐藏当前元素</li><li>$(“p”).hide() - 隐藏所有 <p> 元素</li><li>$(“p.test”).hide() - 隐藏所有 class&#x3D;”test” 的 <p> 元素</li><li>$(“#test”).hide() - 隐藏所有 id&#x3D;”test” 的元素</li></ul><h5 id="3-1-jQuery选择器"><a href="#3-1-jQuery选择器" class="headerlink" title="3.1 jQuery选择器"></a>3.1 jQuery选择器</h5><h6 id="3-1-1-元素选择器"><a href="#3-1-1-元素选择器" class="headerlink" title="3.1.1 元素选择器"></a>3.1.1 元素选择器</h6><p>jQuery 元素选择器基于元素名选取元素。<br>在页面中选取所有 <p> 元素:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">hide</span>();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h6 id="3-1-2-id选择器"><a href="#3-1-2-id选择器" class="headerlink" title="3.1.2 id选择器"></a>3.1.2 id选择器</h6><p>jQuery #id 选择器通过 HTML 元素的 id 属性选取指定的元素。<br>页面中元素的 id 应该是唯一的，所以您要在页面中选取唯一的元素需要通过 #id 选择器。<br>通过 id 选取元素语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">hide</span>();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h6 id="3-1-3-class选择器"><a href="#3-1-3-class选择器" class="headerlink" title="3.1.3 class选择器"></a>3.1.3 class选择器</h6><p>jQuery 类选择器可以通过指定的 class 查找元素。<br>语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&quot;.test&quot;</span>).<span class="hljs-title function_">hide</span>();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="3-2-jQuery事件"><a href="#3-2-jQuery事件" class="headerlink" title="3.2 jQuery事件"></a>3.2 jQuery事件</h5><h6 id="3-2-1-什么是事件？"><a href="#3-2-1-什么是事件？" class="headerlink" title="3.2.1 什么是事件？"></a>3.2.1 什么是事件？</h6><p>页面对不同访问者的响应叫做事件。<br>事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。<br>实例：</p><ul><li>在元素上移动鼠标。</li><li>选取单选按钮</li><li>点击元素<br>在事件中经常使用术语”触发”（或”激发”）例如： “当您按下按键时触发 keypress 事件”。<br>常见 DOM 事件：<table><thead><tr><th>鼠标事件</th><th>键盘事件</th><th>表单事件</th><th>文档&#x2F;窗口事件</th></tr></thead><tbody><tr><td>click</td><td>keypress</td><td>submit</td><td>load</td></tr><tr><td>dblclick</td><td>keydown</td><td>change</td><td>resize</td></tr><tr><td>mouseover</td><td>keyup</td><td>focus</td><td>scroll</td></tr><tr><td>mouseout</td><td></td><td>blur</td><td>unload</td></tr></tbody></table></li></ul><h6 id="3-2-2-jQuery-事件方法语法"><a href="#3-2-2-jQuery-事件方法语法" class="headerlink" title="3.2.2 jQuery 事件方法语法"></a>3.2.2 jQuery 事件方法语法</h6><p>在 jQuery 中，大多数 DOM 事件都有一个等效的 jQuery 方法。<br>页面中指定一个点击事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">click</span>();<br></code></pre></td></tr></table></figure><p>下一步是定义触发事件。您可以通过一个事件函数实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 动作触发后执行的代码!!</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>也就是说，不传参数是点击，传参数是设置事件。<br><strong>常用的 jQuery 事件方法</strong><br>$(document).ready() 方法允许我们在文档完全加载完后执行函数。该事件方法在 <a href="http://www.runoob.com/jquery/jquery-syntax.html">jQuery 语法</a> 章节中已经提到过。<br><em><strong>click()</strong></em><br>当按钮点击事件被触发时会调用一个函数。<br>该函数在用户点击 HTML 元素时执行。<br>在下面的实例中，当点击事件在某个 <p> 元素上触发时，隐藏当前的 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">hide</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>dblclick()</strong></em><br>当双击元素时，会发生 dblclick 事件。<br>dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">dblclick</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">hide</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>mouseover()</strong></em><br>当鼠标指针穿过元素时，会发生 mouseover 事件。<br>mouseover() 方法触发 mouseover 事件，或规定当发生 mouseover 事件时运行的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#p1&quot;</span>).<span class="hljs-title function_">mouseover</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您的鼠标移到了 id=&quot;p1&quot; 的元素上!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>mouseout()</strong></em><br>当鼠标指针离开元素时，会发生 mouseout 事件。<br>mouseout() 方法触发 mouseout 事件，或规定当发生 mouseout 事件时运行的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#p1&quot;</span>).<span class="hljs-title function_">mouseout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;再见，您的鼠标离开了该段落。&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>mousedown()</strong></em><br>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。<br>mousedown() 方法触发 mousedown 事件，或规定当发生 mousedown 事件时运行的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#p1&quot;</span>).<span class="hljs-title function_">mousedown</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;鼠标在该段落上按下！&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>mouseup()</strong></em><br>当在元素上松开鼠标按钮时，会发生 mouseup 事件。<br>mouseup() 方法触发 mouseup 事件，或规定当发生 mouseup 事件时运行的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#p1&quot;</span>).<span class="hljs-title function_">mouseup</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;鼠标在段落上松开。&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>hover()</strong></em><br>hover()方法用于模拟光标悬停事件。<br>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#p1&quot;</span>).<span class="hljs-title function_">hover</span>(<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你进入了 p1!&quot;</span>);<br>    &#125;,<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;拜拜! 现在你离开了 p1!&quot;</span>);<br>    &#125;<br>);<br></code></pre></td></tr></table></figure><p><em><strong>focus()</strong></em><br>当元素获得焦点时，发生 focus 事件。<br>当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。<br>focus() 方法触发 focus 事件，或规定当发生 focus 事件时运行的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">focus</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#cccccc&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>blur()</strong></em><br>当元素失去焦点时，发生 blur 事件。<br>blur() 方法触发 blur 事件，或规定当发生 blur 事件时运行的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">blur</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#ffffff&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="第四节-jQuery效果"><a href="#第四节-jQuery效果" class="headerlink" title="第四节 jQuery效果"></a>第四节 jQuery效果</h4><h5 id="4-1-隐藏显示"><a href="#4-1-隐藏显示" class="headerlink" title="4.1 隐藏显示"></a>4.1 隐藏显示</h5><p><em><strong>hide()</strong></em><br>您可以使用 hide() 将元素隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#hide&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">hide</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>show()</strong></em><br>您可以使用show()将元素显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#show&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">show</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>toggle()</strong></em><br>通过 jQuery，您可以使用 toggle() 方法来切换 hide() 和 show() 方法。<br>显示被隐藏的元素，并隐藏已显示的元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">toggle</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>事实上，这三种方法都是有两个参数的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">hide</span>(speed,callback);<br>$(selector).<span class="hljs-title function_">show</span>(speed,callback);<br>$(selector).<span class="hljs-title function_">toggle</span>(speed,callback);<br></code></pre></td></tr></table></figure><p>可选的 speed 参数规定隐藏&#x2F;显示的速度，可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><h5 id="4-2-淡入淡出"><a href="#4-2-淡入淡出" class="headerlink" title="4.2 淡入淡出"></a>4.2 淡入淡出</h5><p>通过 jQuery，您可以实现元素的淡入淡出效果。<br>jQuery 拥有下面四种 fade 方法：</p><ul><li>fadeIn()</li><li>fadeOut()</li><li>fadeToggle()</li><li>fadeTo()</li></ul><p><em><strong>jQuery fadeIn() 方法</strong></em><br>jQuery fadeIn() 用于淡入已隐藏的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">fadeIn</span>(speed,callback);<br></code></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。.<br>可选的 callback 参数是 fading 完成后所执行的函数名称。<br>下面的例子演示了带有不同参数的 fadeIn() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">fadeIn</span>();<br>  $(<span class="hljs-string">&quot;#div2&quot;</span>).<span class="hljs-title function_">fadeIn</span>(<span class="hljs-string">&quot;slow&quot;</span>);<br>  $(<span class="hljs-string">&quot;#div3&quot;</span>).<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">3000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>jQuery fadeOut() 方法</strong></em><br>jQuery fadeOut() 方法用于淡出可见元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">fadeOut</span>(speed,callback);<br></code></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是 fading 完成后所执行的函数名称。<br>下面的例子演示了带有不同参数的 fadeOut() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">fadeOut</span>();<br>  $(<span class="hljs-string">&quot;#div2&quot;</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-string">&quot;slow&quot;</span>);<br>  $(<span class="hljs-string">&quot;#div3&quot;</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">3000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>jQuery fadeToggle() 方法</strong></em><br>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。<br>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。<br>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">fadeToggle</span>(speed,callback);<br></code></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是 fading 完成后所执行的函数名称。<br>下面的例子演示了带有不同参数的 fadeToggle() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">fadeToggle</span>();<br>  $(<span class="hljs-string">&quot;#div2&quot;</span>).<span class="hljs-title function_">fadeToggle</span>(<span class="hljs-string">&quot;slow&quot;</span>);<br>  $(<span class="hljs-string">&quot;#div3&quot;</span>).<span class="hljs-title function_">fadeToggle</span>(<span class="hljs-number">3000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>jQuery fadeTo() 方法</strong></em><br>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">fadeTo</span>(speed,opacity,callback);<br></code></pre></td></tr></table></figure><p>必需的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。<br>fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。<br>可选的 callback 参数是该函数完成后所执行的函数名称。<br>下面的例子演示了带有不同参数的 fadeTo() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-string">&quot;slow&quot;</span>,<span class="hljs-number">0.15</span>);<br>  $(<span class="hljs-string">&quot;#div2&quot;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-string">&quot;slow&quot;</span>,<span class="hljs-number">0.4</span>);<br>  $(<span class="hljs-string">&quot;#div3&quot;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-string">&quot;slow&quot;</span>,<span class="hljs-number">0.7</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4-3-滑动"><a href="#4-3-滑动" class="headerlink" title="4.3 滑动"></a>4.3 滑动</h5><p>通过 jQuery，您可以在元素上创建滑动效果。<br>jQuery 拥有以下滑动方法：</p><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><p><em><strong>slideDown() 方法</strong></em></p><p>jQuery slideDown() 方法用于向下滑动元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">slideDown</span>(speed,callback);<br></code></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><p>下面的例子演示了 slideDown() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#flip&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;#panel&quot;</span>).<span class="hljs-title function_">slideDown</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>slideUp() 方法</strong></em></p><p>jQuery slideUp() 方法用于向上滑动元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">slideUp</span>(speed,callback);<br></code></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><p>下面的例子演示了 slideUp() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#flip&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;#panel&quot;</span>).<span class="hljs-title function_">slideUp</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>slideToggle() 方法</strong></em></p><p>jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。</p><p>如果元素向下滑动，则 slideToggle() 可向上滑动它们。</p><p>如果元素向上滑动，则 slideToggle() 可向下滑动它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">slideToggle</span>(speed,callback);<br></code></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><p>下面的例子演示了 slideToggle() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#flip&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;#panel&quot;</span>).<span class="hljs-title function_">slideToggle</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4-4-链式编程"><a href="#4-4-链式编程" class="headerlink" title="4.4 链式编程"></a>4.4 链式编程</h5><p>直到现在，我们都是一次写一条 jQuery 语句（一条接着另一条）。</p><p>不过，有一种名为链接（chaining）的技术，允许我们在相同的元素上运行多条 jQuery 命令，一条接着另一条。</p><p><strong>提示：</strong> 这样的话，浏览器就不必多次查找相同的元素。</p><p>如需链接一个动作，您只需简单地把该动作追加到之前的动作上。</p><p>下面的例子把 css()、slideUp() 和 slideDown() 链接在一起。”p1” 元素首先会变为红色，然后向上滑动，再然后向下滑动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#p1&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>).<span class="hljs-title function_">slideUp</span>(<span class="hljs-number">2000</span>).<span class="hljs-title function_">slideDown</span>(<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>如果需要，我们也可以添加多个方法调用。</p><p><strong>提示：</strong>当进行链接时，代码行会变得很差。不过，jQuery 语法不是很严格；您可以按照希望的格式来写，包含换行和缩进。</p><p>如下书写也可以很好地运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#p1&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>)<br>  .<span class="hljs-title function_">slideUp</span>(<span class="hljs-number">2000</span>)<br>  .<span class="hljs-title function_">slideDown</span>(<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><h4 id="第五节-jQuery-HTML"><a href="#第五节-jQuery-HTML" class="headerlink" title="第五节 jQuery HTML"></a>第五节 jQuery HTML</h4><h5 id="5-1-捕获"><a href="#5-1-捕获" class="headerlink" title="5.1 捕获"></a>5.1 捕获</h5><p>jQuery 拥有可操作 HTML 元素和属性的强大方法。</p><p><em><strong>jQuery DOM 操作</strong></em></p><p>jQuery 中非常重要的部分，就是操作 DOM 的能力。</p><p>jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易。</p><p><em><strong>获得内容 - text()、html() 以及 val()</strong></em></p><p>三个简单实用的用于 DOM 操作的 jQuery 方法：</p><ul><li>text() - 设置或返回所选元素的文本内容—-&gt;innerText</li><li>html() - 设置或返回所选元素的内容（包括 HTML 标记）—innerHTML</li><li>val() - 设置或返回表单字段的值—value属性</li></ul><p>下面的例子演示如何通过 jQuery text() 和 html() 方法来获得内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Text: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">text</span>());<br>&#125;);<br>$(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;HTML: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">html</span>());<br>&#125;);<br></code></pre></td></tr></table></figure><p>下面的例子演示如何通过 jQuery val() 方法获得输入字段的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;值为: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">val</span>());<br>&#125;);<br></code></pre></td></tr></table></figure><p>获取属性-attr()</p><p>jQuery attr() 方法用于获取属性值。</p><p>下面的例子演示如何获得链接中 href 属性的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;#a1&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;href&quot;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="5-2-设置"><a href="#5-2-设置" class="headerlink" title="5.2 设置"></a>5.2 设置</h5><p><em><strong>设置内容 - text()、html() 以及 val()</strong></em></p><p>我们将使用前一章中的三个相同的方法来设置内容：</p><ul><li>text() - 设置或返回所选元素的文本内容</li><li>html() - 设置或返回所选元素的内容（包括 HTML 标记）</li><li>val() - 设置或返回表单字段的值</li></ul><p>下面的例子演示如何通过 text()、html() 以及 val() 方法来设置内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&quot;#test1&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&quot;#test2&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);<br>&#125;);<br>$(<span class="hljs-string">&quot;#btn3&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&quot;#test3&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>text()、html() 以及 val() 的回调函数</strong></em></p><p>上面的三个 jQuery 方法：text()、html() 以及 val()，同样拥有回调函数。回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。</p><p>下面的例子演示带有回调函数的 text() 和 html()：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&quot;#test1&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i,origText</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;旧文本: &quot;</span> + origText + <span class="hljs-string">&quot; 新文本: Hello world! (index: &quot;</span> + i + <span class="hljs-string">&quot;)&quot;</span>; <br>    &#125;);<br>&#125;);<br> <br>$(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&quot;#test2&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i,origText</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;旧 html: &quot;</span> + origText + <span class="hljs-string">&quot; 新 html: Hello &lt;b&gt;world!&lt;/b&gt; (index: &quot;</span> + i + <span class="hljs-string">&quot;)&quot;</span>; <br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong>设置属性 - attr()</strong></em></p><p>jQuery attr() 方法也用于设置&#x2F;改变属性值。</p><p>下面的例子演示如何改变（设置）文本中 color属性的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;#font1&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>案例 ：全选 |全不选</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;title&gt;全选全不选&lt;/title&gt;<br>&lt;script src=&quot;js/jquery-1.11.0.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;table border=&quot;1&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;<br>&lt;tr&gt;<br>&lt;td&gt;&lt;input id=&quot;selectAll&quot; type=&quot;checkbox&quot;&gt;全选&lt;/td&gt;<br>&lt;td&gt;编号&lt;/td&gt;<br>&lt;td&gt;用户名&lt;/td&gt;<br>&lt;td&gt;密码&lt;/td&gt;<br>&lt;/tr&gt;<br>&lt;tr&gt;<br>&lt;td&gt;&lt;input type=&quot;checkbox&quot; class=&quot;sel&quot;&gt;&lt;/td&gt;<br>&lt;td&gt;1&lt;/td&gt;<br>&lt;td&gt;zhangsan&lt;/td&gt;<br>&lt;td&gt;123&lt;/td&gt;<br>&lt;/tr&gt;<br><br>&lt;tr&gt;<br>&lt;td&gt;&lt;input type=&quot;checkbox&quot; class=&quot;sel&quot;&gt;&lt;/td&gt;<br>&lt;td&gt;2&lt;/td&gt;<br>&lt;td&gt;lisi&lt;/td&gt;<br>&lt;td&gt;123123&lt;/td&gt;<br>&lt;/tr&gt;<br><br>&lt;tr&gt;<br>&lt;td&gt;&lt;input type=&quot;checkbox&quot; class=&quot;sel&quot;&gt;&lt;/td&gt;<br>&lt;td&gt;3&lt;/td&gt;<br>&lt;td&gt;wangwu&lt;/td&gt;<br>&lt;td&gt;12312421&lt;/td&gt;<br>&lt;/tr&gt;<br><br><br>&lt;/table&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>$(function()&#123;<br>$(&quot;#selectAll&quot;).click(function()&#123;<br>//attr(); ----&gt;prop();<br>//alert($(this).attr(&quot;checked&quot;));<br>//alert($(this).prop(&quot;checked&quot;));<br>if($(this).prop(&quot;checked&quot;))&#123;<br>$(&quot;.sel&quot;).prop(&quot;checked&quot;,true);<br>&#125;else&#123;<br>$(&quot;.sel&quot;).prop(&quot;checked&quot;,false);<br>&#125;<br>&#125;);<br>&#125;);<br><br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h5 id="5-3-添加元素"><a href="#5-3-添加元素" class="headerlink" title="5.3 添加元素"></a>5.3 添加元素</h5><p><strong>添加新的 HTML 内容</strong></p><p>我们将学习用于添加新内容的四个 jQuery 方法：</p><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul><p><strong>jQuery append() 方法</strong></p><p>jQuery append() 方法在被选元素的结尾插入内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;追加文本&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>jQuery prepend() 方法</strong></p><p>jQuery prepend() 方法在被选元素的开头插入内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">prepend</span>(<span class="hljs-string">&quot;在开头追加文本&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>通过 append() 和 prepend() 方法添加若干新元素</strong></p><p>在上面的例子中，我们只在被选元素的开头&#x2F;结尾插入文本&#x2F;HTML。</p><p>不过，append() 和 prepend() 方法能够通过参数接收无限数量的新元素。可以通过 jQuery 来生成文本&#x2F;HTML（就像上面的例子那样），或者通过 JavaScript 代码和 DOM 元素。</p><p>在下面的例子中，我们创建若干个新元素。这些元素可以通过 text&#x2F;HTML、jQuery 或者 JavaScript&#x2F;DOM 来创建。然后我们通过 append() 方法把这些新元素追加到文本中（对 prepend() 同样有效）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">appendText</span>(<span class="hljs-params"></span>)<br>&#123;<br>    <span class="hljs-keyword">var</span> txt1=<span class="hljs-string">&quot;&lt;p&gt;文本。&lt;/p&gt;&quot;</span>;              <span class="hljs-comment">// 使用 HTML 标签创建文本</span><br>    <span class="hljs-keyword">var</span> txt2=$(<span class="hljs-string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;文本。&quot;</span>);  <span class="hljs-comment">// 使用 jQuery 创建文本</span><br>    <span class="hljs-keyword">var</span> txt3=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>);<br>    txt3.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;文本。&quot;</span>;               <span class="hljs-comment">// 使用 DOM 创建文本 text with DOM</span><br>    $(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">append</span>(txt1,txt2,txt3);        <span class="hljs-comment">// 追加新元素</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>jQuery after() 和 before() 方法</strong></p><p>jQuery after() 方法在被选元素之后插入内容。</p><p>jQuery before() 方法在被选元素之前插入内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">after</span>(<span class="hljs-string">&quot;在后面添加文本&quot;</span>);<br> <br>$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">before</span>(<span class="hljs-string">&quot;在前面添加文本&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>通过 after() 和 before() 方法添加若干新元素</strong></p><p>after() 和 before() 方法能够通过参数接收无限数量的新元素。可以通过 text&#x2F;HTML、jQuery 或者 JavaScript&#x2F;DOM 来创建新元素。</p><p>在下面的例子中，我们创建若干新元素。这些元素可以通过 text&#x2F;HTML、jQuery 或者 JavaScript&#x2F;DOM 来创建。然后我们通过 after() 方法把这些新元素插到文本中（对 before() 同样有效）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">afterText</span>(<span class="hljs-params"></span>)<br>&#123;<br>    <span class="hljs-keyword">var</span> txt1=<span class="hljs-string">&quot;&lt;b&gt;I &lt;/b&gt;&quot;</span>;                    <span class="hljs-comment">// 使用 HTML 创建元素</span><br>    <span class="hljs-keyword">var</span> txt2=$(<span class="hljs-string">&quot;&lt;i&gt;&lt;/i&gt;&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;love &quot;</span>);     <span class="hljs-comment">// 使用 jQuery 创建元素</span><br>    <span class="hljs-keyword">var</span> txt3=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;big&quot;</span>);  <span class="hljs-comment">// 使用 DOM 创建元素</span><br>    txt3.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;jQuery!&quot;</span>;<br>    $(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">after</span>(txt1,txt2,txt3);          <span class="hljs-comment">// 在图片后添加文本</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-4-删除元素"><a href="#5-4-删除元素" class="headerlink" title="5.4 删除元素"></a>5.4 删除元素</h5><p><strong>删除元素&#x2F;内容</strong></p><p>如需删除元素和内容，一般可使用以下两个 jQuery 方法：</p><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul><p><strong>jQuery remove() 方法</strong></p><p>jQuery remove() 方法删除被选元素及其子元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">remove</span>();<br></code></pre></td></tr></table></figure><p><strong>jQuery empty() 方法</strong></p><p>jQuery empty() 方法删除被选元素的子元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">empty</span>();<br></code></pre></td></tr></table></figure><p><strong>过滤被删除的元素</strong></p><p>jQuery remove() 方法也可接受一个参数，允许您对被删元素进行过滤。</p><p>该参数可以是任何 jQuery 选择器的语法。</p><p>下面的例子删除 class&#x3D;”italic” 的所有 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;.italic&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="5-5数组或集合元素遍历"><a href="#5-5数组或集合元素遍历" class="headerlink" title="5.5数组或集合元素遍历"></a>5.5数组或集合元素遍历</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i,n</span>)&#123;<br>  <span class="hljs-title function_">alert</span>(i+<span class="hljs-string">&quot;....&quot;</span>+n);<br>&#125;);<br>或<br>$.<span class="hljs-title function_">each</span>(arr,<span class="hljs-keyword">function</span>(<span class="hljs-params">i,n</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(i+<span class="hljs-string">&quot;....&quot;</span>+n);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="5-6-CSS类"><a href="#5-6-CSS类" class="headerlink" title="5.6 CSS类"></a>5.6 CSS类</h5><p><strong>jQuery 操作 CSS</strong></p><p>jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：</p><ul><li>addClass() - 向被选元素添加一个或多个类</li><li>removeClass() - 从被选元素删除一个或多个类</li><li>toggleClass() - 对被选元素进行添加&#x2F;删除类的切换操作</li><li>css() - 设置或返回样式属性</li></ul><p><strong>实例样式表</strong></p><p>下面的样式表将用于本页的所有例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.important</span><br>&#123;<br>        <span class="hljs-attribute">font-weight</span>:bold;<br>        <span class="hljs-attribute">font-size</span>:xx-large;<br>&#125;<br> <br><span class="hljs-selector-class">.blue</span><br>&#123;<br>        <span class="hljs-attribute">color</span>:blue;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>jQuery addClass() 方法</strong></p><p>下面的例子展示如何向不同的元素添加 class 属性。当然，在添加类时，您也可以选取多个元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;blue&quot;</span>);<br>  $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;important&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>您也可以在 addClass() 方法中规定多个类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;body div:first&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;important blue&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>jQuery removeClass() 方法</strong></p><p>下面的例子演示如何在不同的元素中删除指定的 class 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;blue&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>jQuery toggleClass() 方法</strong></p><p>下面的例子将展示如何使用 jQuery toggleClass() 方法。该方法对被选元素进行添加&#x2F;删除类的切换操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&quot;blue&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="5-7-CSS-方法"><a href="#5-7-CSS-方法" class="headerlink" title="5.7 CSS()方法"></a>5.7 CSS()方法</h5><p><strong>jQuery css() 方法</strong></p><p>css() 方法设置或返回被选元素的一个或多个样式属性。</p><p><strong>返回 CSS 属性</strong></p><p>如需返回指定的 CSS 属性的值，请使用如下语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;propertyname&quot;</span>);<br></code></pre></td></tr></table></figure><p>下面的例子将返回首个匹配元素的 background-color 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>设置 CSS 属性</strong></p><p>如需设置指定的 CSS 属性，请使用如下语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;propertyname&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br></code></pre></td></tr></table></figure><p>下面的例子将为所有匹配元素设置 background-color 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>设置多个 CSS 属性</strong></p><p>如需设置多个 CSS 属性，请使用如下语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;propertyname&quot;</span>:<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;propertyname&quot;</span>:<span class="hljs-string">&quot;value&quot;</span>,...&#125;);<br></code></pre></td></tr></table></figure><p>下面的例子将为所有匹配元素设置 background-color 和 font-size：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;background-color&quot;</span>:<span class="hljs-string">&quot;yellow&quot;</span>,<span class="hljs-string">&quot;font-size&quot;</span>:<span class="hljs-string">&quot;200%&quot;</span>&#125;);<br></code></pre></td></tr></table></figure><p>案例演示；省市级联</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//2.创建二维数组用于存储省份和城市</span><br><span class="hljs-keyword">var</span> cities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>);<br>cities[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;武汉市&quot;</span>,<span class="hljs-string">&quot;黄冈市&quot;</span>,<span class="hljs-string">&quot;襄阳市&quot;</span>,<span class="hljs-string">&quot;荆州市&quot;</span>);<br>cities[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;长沙市&quot;</span>,<span class="hljs-string">&quot;郴州市&quot;</span>,<span class="hljs-string">&quot;株洲市&quot;</span>,<span class="hljs-string">&quot;岳阳市&quot;</span>);<br>cities[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;石家庄市&quot;</span>,<span class="hljs-string">&quot;邯郸市&quot;</span>,<span class="hljs-string">&quot;廊坊市&quot;</span>,<span class="hljs-string">&quot;保定市&quot;</span>);<br>cities[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;郑州市&quot;</span>,<span class="hljs-string">&quot;洛阳市&quot;</span>,<span class="hljs-string">&quot;开封市&quot;</span>,<span class="hljs-string">&quot;安阳市&quot;</span>);<br><br>$(<span class="hljs-string">&quot;#province&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//10.清除第二个下拉列表的内容</span><br>$(<span class="hljs-string">&quot;#city&quot;</span>).<span class="hljs-title function_">empty</span>();<br><br><span class="hljs-comment">//1.获取用户选择的省份</span><br><span class="hljs-keyword">var</span> val = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;<br><span class="hljs-comment">//alert(val);</span><br><span class="hljs-comment">//3.遍历二维数组中的省份</span><br>$.<span class="hljs-title function_">each</span>(cities,<span class="hljs-keyword">function</span>(<span class="hljs-params">i,n</span>)&#123;<br><span class="hljs-comment">//alert(i+&quot;:&quot;+n);</span><br><span class="hljs-comment">//4.判断用户选择的省份和遍历的省份</span><br><span class="hljs-keyword">if</span>(val==i)&#123;<br><span class="hljs-comment">//5.遍历该省份下的所有城市</span><br>$.<span class="hljs-title function_">each</span>(cities[i], <span class="hljs-keyword">function</span>(<span class="hljs-params">j,m</span>) &#123;<br><span class="hljs-comment">//alert(m);</span><br><span class="hljs-comment">//6.创建城市文本节点</span><br><span class="hljs-keyword">var</span> textNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(m);<br><span class="hljs-comment">//7.创建option元素节点</span><br><span class="hljs-keyword">var</span> opEle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;option&quot;</span>);<br><span class="hljs-comment">//8.将城市文本节点添加到option元素节点中去</span><br>$(opEle).<span class="hljs-title function_">append</span>(textNode);<br><span class="hljs-comment">//9.将option元素节点追加到第二个下拉列表中去</span><br>$(opEle).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;#city&quot;</span>));<br>&#125;);<br>&#125;<br>&#125;);<br><br>&#125;);<br>&#125;);<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h4 id="第六节-jQuery遍历"><a href="#第六节-jQuery遍历" class="headerlink" title="第六节 jQuery遍历"></a>第六节 jQuery遍历</h4><h5 id="6-1-遍历"><a href="#6-1-遍历" class="headerlink" title="6.1 遍历"></a>6.1 遍历</h5><p>jQuery 遍历，意为”移动”，用于根据其相对于其他元素的关系来”查找”（或选取）HTML 元素。以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止。</p><p>下图展示了一个家族树。通过 jQuery 遍历，您能够从被选（当前的）元素开始，轻松地在家族树中向上移动（祖先），向下移动（子孙），水平移动（同胞）。这种移动被称为对 DOM 进行遍历。</p><h5 id="6-2-祖先"><a href="#6-2-祖先" class="headerlink" title="6.2 祖先"></a>6.2 祖先</h5><p><strong>jQuery parent() 方法</strong></p><p>parent() 方法返回被选元素的直接父元素。</p><p>该方法只会向上一级对 DOM 树进行遍历。</p><p>下面的例子返回每个 <span> 元素的的直接父元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parent</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="6-3-后代"><a href="#6-3-后代" class="headerlink" title="6.3 后代"></a>6.3 后代</h5><p><strong>jQuery children() 方法</strong></p><p>children() 方法返回被选元素的所有直接子元素。</p><p>该方法只会向下一级对 DOM 树进行遍历。</p><p>下面的例子返回每个 <div> 元素的所有直接子元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">children</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>您也可以使用可选参数来过滤对子元素的搜索。</p><p>下面的例子返回类名为 “1” 的所有 <p> 元素，并且它们是 <div> 的直接子元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&quot;p.1&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>jQuery find() 方法</strong></p><p>find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。</p><p>下面的例子返回属于 <div> 后代的所有 <span> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;span&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>下面的例子返回 <div> 的所有后代：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="6-4-同胞"><a href="#6-4-同胞" class="headerlink" title="6.4 同胞"></a>6.4 同胞</h5><p><strong>jQuery siblings() 方法</strong></p><p>siblings() 方法返回被选元素的所有同胞元素。</p><p>下面的例子返回 <h2> 的所有同胞元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">siblings</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>您也可以使用可选参数来过滤对同胞元素的搜索。</p><p>下面的例子返回属于 <h2> 的同胞元素的所有 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&quot;p&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>jQuery next() 方法</strong></p><p>next() 方法返回被选元素的下一个同胞元素。</p><p>该方法只返回一个元素。</p><p>下面的例子返回 <h2> 的下一个同胞元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
